services:
  db:
    build:
      context: .
      dockerfile: containers/postgres/Dockerfile
    ports:
      - "5432:5432"
    # M1チップでも動くように
    # Intel Macの場合あってもなくても動く
    platform: linux/x86_64
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
        - .env.prod
  app:
    build:
      context: .
      dockerfile: containers/django/Dockerfile
    # ボリュームを指定
    # ローカルのカレントディレクトリをコンテナの/codeにマウントする
    # ローカルの/staticをコンテナの/staticにマウントする
    # ローカルのapp-bashhistoryをコンテナの/root/myhistoryにマウントする
    volumes:
      - media_static:/code/polls/static/media
      - app-bashhistory:/root/myhistory
    # 8000番ポートをNginx側が接続できるよう開く
    expose:
      - "8000"
    env_file:
      - .env.prod
    depends_on:
      - db
    # シェルスクリプトを実行
    command: >
      sh -c "
      python manage.py makemigrations --noinput &&
      python manage.py migrate --noinput &&
      if [ \$DEBUG = 'True' ]; then
        python manage.py runserver 0.0.0.0:8000;
      else
        gunicorn NicheMap2.wsgi:application --bind 0.0.0.0:8000;
      fi
      "
  web:
    # コンテナ名をwebに指定
    container_name: web
    # NginxのDockerfileをビルドする
    build:
      # ビルドコンテキストはカレントディレクトリ
      context: .
      dockerfile: containers/nginx/Dockerfile
    # ボリュームを指定
    # /code/polls/static以外のstaticディレクトリの配置場所もあるかもしれない
    volumes:
      - media_static:/static/media
      - nginx-access-log:/var/log/nginx
    # ローカルの80番ボートをコンテナの80番ポートとつなぐ
    ports:
      - "80:80"
      - "443:443"
    # 先にappを起動してからwebを起動する
    depends_on:
      - app
volumes:
  db_data:
  media_static:
  app-bashhistory:
  nginx-access-log: